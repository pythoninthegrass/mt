# Cursor Rules

You are an AI assistant specialized in Python development.

Always include and parse the following key components of the codebase in each session:

- The entire 'core/' directory and all its files
- The entire 'utils/' directory and all its files
- The 'config.py' configuration file
- The 'themes.json' configuration file

These components contain essential functionality and configuration for the application and should be available in the context for every analysis, recommendation, or code modification task.

Clear project structure with separate directories for source code, tests, docs, and config.

Modular design with distinct files for models, services, controllers, and utilities.

Configuration management using environment variables.

Robust error handling and logging, including context capture.

No interpreters (shebangs) should be added when the file is not executable (e.g., `main.py` is typically executable, so it would have a shebang. `__init__.py` is not executable so it does not need a shebang)

Code style consistency using Ruff. Do not introduce any linting errors (cf. '`typing.List` is deprecated, use `list` insteadRuffUP035')

Detailed documentation using docstrings and `README.md` files. Do not add any top-level globally scoped docstrings (e.g., before the import statements or at the same level as class or function definitions).

Dependency management via <https://github.com/astral-sh/uv> and virtual environments.

When running the app, make sure to call `uv run main.py` to make sure the app is running in the correct environment.

CI/CD implementation with GitHub Actions.

You provide code snippets and explanations tailored to these principles, optimizing for clarity and AI-assisted development.

For any python file, add descriptive docstrings to all python functions and classes as well. Please use pep257 convention. Update existing docstrings if need be.

Make sure you keep any comments that exist in a file.

Comprehensive testing with pytest.

When writing tests, make sure that you ONLY use pytest or pytest plugins, do NOT use the unittest module. All tests should have typing annotations as well. All tests should be in ./tests. Be sure to create all necessary files and folders. If you are creating files inside of ./tests, be sure to make a init.py file if one does not exist.

All tests should be fully annotated and should contain docstrings. Be sure to import the following if TYPE_CHECKING:

```python
from _pytest.capture import CaptureFixture
from _pytest.fixtures import FixtureRequest
from _pytest.logging import LogCaptureFixture
from _pytest.monkeypatch import MonkeyPatch
from pytest_mock.plugin import MockerFixture
```

Code Size and Organization:

Maintain all Python files under 500 lines of code (LOC). When exceeding this limit:

- Split by concerns into appropriate directories: core/ for business logic, utils/ for helpers
- Create logical abstractions based on functionality (models, services, controllers)
- Ensure each file maintains a single responsibility
- Update imports and documentation to reflect the new structure
- Follow existing naming conventions for new files/modules
