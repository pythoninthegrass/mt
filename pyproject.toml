[project]
name = "mt"
version = "0.1.0"
description = "mt is a simple desktop music player designed for large music collections."
authors = [
    { name = "pythoninthegrass", email = "4097471+pythoninthegrass@users.noreply.github.com" }
]

requires-python = ">=3.11,<3.12"

dependencies = [
    "customtkinter>=5.2.2",
    "eliot-tree>=24.0.0",
    "eliot>=1.17.5",
    "mutagen>=1.47.0",
    "pillow>=11.3.0",
    'pyobjc-framework-Cocoa; platform_system == "Darwin"',
    'pyobjc-framework-Quartz; sys_platform == "darwin"',
    "python-decouple>=3.8",
    "python-vlc>=3.0.21203",
    "tk>=0.1.0",
    "tkinterdnd2>=0.4.2",
    "ziggy-pydust>=0.25.1",
]

[project.optional-dependencies]
dev = [
    "pyclean>=3.1.0",
    "ruff>=0.9.6",
    "watchdog>=6.0.0",
    "ziggy-pydust>=0.25.1",
]

test = [
    "hypothesis[cli]>=6.140.3",
    "pytest==8.3.4",
    "pytest-asyncio==0.25.2",
    "pytest-cov==6.0.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = "--durations=10 -v -p no:pydust --cov=. --cov-report=term-missing"
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "benchmark: marks performance benchmark tests"
]

[tool.coverage.run]
# Exclude development utilities that are not part of production code
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
    # Development tools (not production code)
    "utils/repeater.py",
    "utils/reload.py",
    "utils/icons.py",
    # GUI components (tested via E2E, heavy on rendering, low value for unit coverage)
    "core/gui.py",
    "core/player.py",
    "core/widgets/*",
    "core/progress.py",
    "core/volume.py",
    "core/stoplight.py",
    "core/now_playing.py",
    "core/theme.py",
    # Build and configuration
    "build.py",
    "setup.py",
    "config.py",
]

[tool.coverage.report]
# Focus on production business logic
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]
# Show files with less than 100% coverage
skip_covered = false
# Sort by percentage missing
sort = "Miss"

[project.scripts]
repeater = "utils.repeater:main"

[build-system]
requires = ["hatchling", "ziggy-pydust==0.25.1"]
build-backend = "hatchling.build"

[tool.hatch.build]
script = "build.py"

[tool.hatch.build.targets.wheel]
packages = ["app", "core", "utils"]
artifacts = ["core/*.so"]
include = [
    "*.py",
    "static/",
    "themes.json",
]

# Configure ziggy-pydust to use our own build.zig
# It will still codegen pydust.build.zig
[tool.pydust]
self_managed = true
